{
	"code": "import com.twitter.scalding._\r\nimport java.io.File\r\nimport com.github.nscala_time.time.Imports._\r\nimport com.mongodb.{BasicDBObject}\r\nimport cascading.tuple.{Fields, TupleEntry}\r\nimport scala.collection.JavaConversions._\r\nimport es.usc.citius.scalding2mongo._\r\n\r\nclass KPI {\r\n  def getLogFiles(dir: String): List[File] = {\r\n    val files = new File(dir)\r\n    files.listFiles.toList\r\n  }\r\n\r\n  def getFilesTypeFilesTimeWindow(timestamp: Long, typeFile: String):List[String] = {\r\n    getLogFiles(\"/home/xurxo/logs\").filter( (file: File) => {\r\n      (file.getName.split(\"\\\\.\")(1).toLong >= DateTime.now.getMillis - timestamp && file.getName.split(\"\\\\.\")(1).toLong <= DateTime.now.getMillis && file.getName.split(\"\\\\.\")(0).contains(typeFile))\r\n    })\r\n    .map((file: File) => file.getCanonicalPath)\r\n  }\r\n  \r\n  class MyMongoHandler(mongoServer: List[MongoServerAddress], databaseName: String, collectionName: String) extends DefaultMongoHandler(mongoServer, databaseName,collectionName) {\r\n    override def handle(tupleEntry: TupleEntry) = {\r\n      val fields: Fields = tupleEntry.getFields();\r\n      val dbo = new BasicDBObject();\r\n      \r\n      //Introduce o id da KPI para asociar os datos devoltos cunha KPI\r\n      dbo.put(\"idKPI\", \"%%IDKPI%%\");\r\n      \r\n      fields.toList.map(f => (f.toString, tupleEntry.getObject(f).toString)).foreach(f => dbo.put(f._1, f._2))\r\n      this.mCollection.insert(dbo);\r\n    }\r\n  }\r\n\r\n  val sas = List(new MongoServerAddress(\"localhost\", 27017))\r\n  val h = new MyMongoHandler(sas, \"kpis\", \"hadoop\")\r\n  val output = MongoSink(h)\r\n\r\n  //Elimina os resultados anteriores desa KPI\r\n  val dbo = new BasicDBObject()\r\n  dbo.put(\"idKPI\", \"%%IDKPI%%\")\r\n  h.mCollection.remove(dbo)    \r\n\r\n  (args: Args) => {\r\n    new Job(args) {\r\n      val files = getFilesTypeFilesTimeWindow(%%TIMEWINDOW%%L, %%TYPEFILE%%)  \r\n      \r\n      %%CODEBASE%%\r\n    }\r\n  }\r\n}"
}