{
	"name" : "Numero Conexions",
	"keywords" : "conexions",
	"description" : "Obten o numero de conexions dos usuarios",
	"time" : 10,
	"representation" : [
		{	
			"type": "line",
			"xAxis": "",
			"yAxis": "",
		},
		{	
			"type": "bar",
			"xAxis": "",
			"yAxis":,
		},
		{	
			"type": "pie",
			"xAxis": "",
			"yAxis": "",
		},
	],
	"code" : null,
}

{
	"name" : "Numero Conexions",
	"keywords" : "conexions",
	"description" : "Obten o numero de conexions dos usuarios",
	"time" : 50,
	"representation" : [
		{	
			"type": "line",
			"xAxis": "",
			"yAxis": "",
		},
		{	
			"type": "bar",
			"xAxis": "",
			"yAxis": "",
		},
		{	
			"type": "pie",
			"xAxis": "",
			"yAxis": "",
		}
	],
	"code" : null
}


{ 
	"name" : "Numero Actualizacions",
	"keywords" : "actualizacions",
	"description" : "Obten o numero de actualizacions",
	"time" : 10,
	"representation" : [
		{	
			"type": "bar",
			"xAxis": "",
			"yAxis": "",
		},
	],
	"code" : null,
}


//PLANTILLAS
[
		{
			"type": "workflowTemplate",
			"name": "Contar Workflows",
			"description": "Conta o numero de workflows que posuan un estado estado determinado",
			"codeBase": "MultipleTsvFiles( files, ('ExecutionID, 'CaseID, 'TaskID, 'NuevoEstado, 'Timestamp))\r\n      .filter( 'TaskID ) {\r\n        fields : (String) => {\r\n          val (taskID) = fields\r\n          \r\n          %%REPEAT%%\r\n        }\r\n      }\r\n      .groupBy( 'TaskID ){ _.size('Count)}\r\n      .rename(('TaskID, 'Count) -> (('TaskID, 'Count)))\r\n      .write(output)",
			"codeRepeat": "taskID == %%TASKID%% || %%ADDOTHER%%"
		},

		{
			"type": "taskTemplate",
			"name": "Estado de tarefas",
			"description": "Conta dentro dun Workflow determinado, se unhas tarefas concretas estan ou estiveron iniciadas/paradas/finalizadas",
			"codeBase": "MultipleTsvFiles( files, ('ExecutionID, 'CaseID, 'TaskID, 'NuevoEstado, 'Timestamp))\r\n      .filter( 'TaskID, 'NuevoEstado ) {\r\n        fields : (String, String) => {\r\n          val (taskID, nuevoEstado) = fields\r\n          \r\n          %%REPEAT%%\r\n        }\r\n      }\r\n      .groupBy( 'TaskID ){ _.size('Count)}\r\n      .rename(('TaskID, 'Count) -> (('TaskID, 'Count)))\r\n      .write(output)",
			"codeRepeat": "taskID == %%TASKID%% && nuevoEstado == %%STATE%% || %%ADDOTHER%%"
		},

		{
			"type": "propertyTemplate",
			"name": "Plantilla para properties",
			"description": "Permite agrupar por unha propiedade e realizar unha operacion de contar/maximo/minimo/media",
			"codeBase": "val pipe = MultipleTsvFiles( files, ('ExecutionID, 'PropertyName, 'PropertyContext, 'Agent, 'CaseID, 'IsCommited, 'Timestamp, 'Value))\r\n\r\n      %%PROPFILTER%%\r\n\r\n      var result = %%PROPNAME%%\r\n\r\n      %%OTHERREPEAT%%\r\n\r\n      result = result.project('ExecutionID, 'CaseID).joinWithSmaller(('ExecutionID, 'CaseID) -> ('ExecutionID, 'CaseID), propRedux)\r\n      result = result.groupBy('PropertyName){_.size%%OPREDUX%%('Value)}.rename(('PropertyName, 'Value) -> (('Property, '%%NAMEOPREDUX%%)))\r\n      result.write(output)",
			"codePipePropFilter": "val %%PROPITERNAME%% = pipe.filter( 'PropertyName, 'Value ) {\r\n        fields : (String, %%VALUETYPE%%) => {\r\n          val (propertyName, value) = fields\r\n          propertyName == \"%%PROPITERNAME%%\" && value %%OP%% %%VALUE%%\r\n        }\r\n      }.unique('ExecutionID, 'CaseID, 'PropertyName, 'Value)\r\n\r\n      %%OTHERPROPFILTER%%",
			"codePipeReduxProp" : "val propRedux = pipe.filter( 'PropertyName ) {\r\n        fields : (String) => {\r\n          val (propertyName) = fields\r\n          propertyName == \"%%PROPREDUXNAME%%\"\r\n        }\r\n      }.unique('ExecutionID, 'CaseID, 'PropertyName, 'Value)",
			"codeAndProp":"result = result.project('ExecutionID, 'CaseID).joinWithSmaller(('ExecutionID, 'CaseID) -> ('ExecutionID, 'CaseID), %%PROPITERNAME%%)\r\n      %%OTHERREPEAT%%",
			"codeOrProp":"result = result ++ %%PROPITERNAME%%\r\n      %%OTHERREPEAT%%",
		}
]